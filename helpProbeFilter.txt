 string filenameDic = "/home/cris/Documentos/DICOMsamples/HipPelvisM";
    //string filenameVtk = "/home/cris/Documentos/DICOMsamples/pelvisFemenina.vtk";
    //string filenameDic = "/home/cris/Descargas/PolyDataToImageData/build/SphereVolume.mhd";
    int resolution = 50;

    vtkDICOMImageReader *dicomReader = vtkDICOMImageReader::New();
    dicomReader->SetDirectoryName(filenameDic.c_str());
    dicomReader->Update();

    // An isosurface, or contour value of 500 is known to correspond to the
    // skin of the patient. MARCHING CUBES HERE
    vtkSmartPointer<vtkMarchingCubes> skinExtractor =
            vtkSmartPointer<vtkMarchingCubes>::New();
    skinExtractor->SetInputConnection(dicomReader->GetOutputPort());
    skinExtractor->SetValue(0, 250);

    //SIN LA PARTE DEL CLIP
    // Define a spherical clip function to clip the isosurface
    vtkSmartPointer<vtkSphere> clipFunction =
            vtkSmartPointer<vtkSphere>::New();
    clipFunction->SetRadius(50);
    clipFunction->SetCenter(150, 250, 500);

    // Clip the isosurface with a sphere
    vtkSmartPointer<vtkClipDataSet> skinClip =
            vtkSmartPointer<vtkClipDataSet>::New();
    skinClip->SetInputConnection(skinExtractor->GetOutputPort()); //VOLUME WILL BE CLIPED
    skinClip->SetClipFunction(clipFunction);// FORM OF THE CLIP (SPHERE)
    skinClip->SetValue(0);
    skinClip->GenerateClipScalarsOn();
    skinClip->Update();

    vtkSmartPointer<vtkDataSetMapper> skinMapper =
            vtkSmartPointer<vtkDataSetMapper>::New();
    skinMapper->SetInputConnection(skinClip->GetOutputPort());
    //skinMapper->SetInputConnection(skinExtractor->GetOutputPort());
    skinMapper->ScalarVisibilityOff();

    vtkSmartPointer<vtkActor> skin = vtkSmartPointer<vtkActor>::New();
    skin->SetMapper(skinMapper);
    //skin->GetProperty()->SetDiffuseColor(1, .49, .25);
    skin->GetProperty()->SetDiffuseColor(0, 1, 0); //GREEN CONTOUR MARCHING CUBES

    vtkSmartPointer<vtkProperty> backProp =
            vtkSmartPointer<vtkProperty>::New();
    //backProp->SetDiffuseColor(0.8900, 0.8100, 0.3400);
    backProp->SetDiffuseColor(1, 0, 0);//RED INTERIOR OF MARCHING CUBES
    skin->SetBackfaceProperty(backProp);//setbackfaceproperty

    // Define a model for the "lens". Its geometry matches the implicit
    // sphere used to clip the isosurface
    vtkSmartPointer<vtkSphereSource> lensModel =
            vtkSmartPointer<vtkSphereSource>::New();
    lensModel->SetRadius(50);
    lensModel->SetCenter(150, 250, 500);
    lensModel->SetPhiResolution(300);
    lensModel->SetThetaResolution(150);

    // Sample the input volume with the lens model geometry
    vtkSmartPointer<vtkProbeFilter> lensProbe =
            vtkSmartPointer<vtkProbeFilter>::New();
    lensProbe->SetInputConnection(lensModel->GetOutputPort()); //ESTRUCTURA A INTEPORLAR SPHERESOURCE
    lensProbe->SetSourceConnection(dicomReader->GetOutputPort()); //DICOM SOURCE INTENSITY

    // Clip the lens data with the isosurface value
    vtkSmartPointer<vtkClipDataSet> lensClip =
            vtkSmartPointer<vtkClipDataSet>::New();
    lensClip->SetInputConnection(lensProbe->GetOutputPort());
    lensClip->SetValue(250);
    lensClip->GenerateClipScalarsOff();
    lensClip->Update();

    // Define a suitable grayscale lut
    vtkSmartPointer<vtkLookupTable> bwLut =
            vtkSmartPointer<vtkLookupTable>::New();
    bwLut->SetTableRange (0, 2048);
    bwLut->SetSaturationRange (0, 0);
    bwLut->SetHueRange (0, 0);
    bwLut->SetValueRange (.2, 1);
    bwLut->Build();

    vtkSmartPointer<vtkDataSetMapper> lensMapper =
            vtkSmartPointer<vtkDataSetMapper>::New();
    lensMapper->SetInputConnection(lensClip->GetOutputPort());
    lensMapper->SetScalarRange(lensClip->GetOutput()->GetScalarRange());
    /*lensMapper->SetInputConnection(lensProbe->GetOutputPort());
    lensMapper->SetScalarRange(lensProbe->GetOutput()->GetScalarRange());*/
    lensMapper->SetLookupTable(bwLut);

    vtkSmartPointer<vtkActor> lens = vtkSmartPointer<vtkActor>::New();
    lens->SetMapper(lensMapper);

    // It is convenient to create an initial view of the data. The FocalPoint
    // and Position form a vector direction. Later on (ResetCamera() method)
    // this vector is used to position the camera to look at the data in
    // this direction.
    /*vtkSmartPointer<vtkCamera> aCamera =
            vtkSmartPointer<vtkCamera>::New();
    aCamera->SetViewUp (0, 0, -1);
    aCamera->SetPosition (0, -1, 0);
    aCamera->SetFocalPoint (0, 0, 0);
    aCamera->ComputeViewPlaneNormal();
    aCamera->Azimuth(30.0);
    aCamera->Elevation(30.0);*/

    // Create the renderer, the render window, and the interactor. The renderer
    // draws into the render window, the interactor enables mouse- and
    // keyboard-based interaction with the data within the render window.
    //
    vtkSmartPointer<vtkRenderer> aRenderer =
            vtkSmartPointer<vtkRenderer>::New();

    ui->qvtkWidget_2->GetRenderWindow()->AddRenderer(aRenderer);


    // Actors are added to the renderer. An initial camera view is created.
    // The Dolly() method moves the camera towards the FocalPoint,
    // thereby enlarging the image.
    aRenderer->AddActor(lens);
    aRenderer->AddActor(skin);
    //aRenderer->SetActiveCamera(aCamera);
    aRenderer->ResetCamera ();
    //aCamera->Dolly(1.5);

    // Set a background color for the renderer and set the size of the
    // render window (expressed in pixels).
    aRenderer->SetBackground(.2, .3, .4);
    ui->qvtkWidget_2->GetRenderWindow()->SetSize(640, 480);

    // Note that when camera movement occurs (as it does in the Dolly()
    // method), the clipping planes often need adjusting. Clipping planes
    // consist of two planes: near and far along the view direction. The
    // near plane clips out objects in front of the plane; the far plane
    // clips out objects behind the plane. This way only what is drawn
    // between the planes is actually rendered.
    aRenderer->ResetCameraClippingRange ();