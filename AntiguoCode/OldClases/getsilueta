/*vtkSmartPointer<vtkPolyData> polyData;

        vtkSmartPointer<vtkSphereSource> sphereSource =
          vtkSmartPointer<vtkSphereSource>::New();
        sphereSource->Update();

        polyData = sphereSource->GetOutput();*/

    vtkSmartPointer<vtkPolyData> polyData;
    polyData = dataMalla->getPolyData();

    //create mapper and actor for original model
    vtkSmartPointer<vtkPolyDataMapper> mapper = vtkSmartPointer<vtkPolyDataMapper>::New();
#if VTK_MAJOR_VERSION <= 5
    mapper->SetInput(polyData);
#else
    mapper->SetInputData(polyData);
#endif

    vtkSmartPointer<vtkActor> actor = vtkSmartPointer<vtkActor>::New();
    actor->SetMapper(mapper);
    //actor->GetProperty()->SetInterpolationToFlat();

    //create renderer and renderWindow
    vtkSmartPointer<vtkRenderer> renderer =
            vtkSmartPointer<vtkRenderer>::New();


    renderer->AddActor(actor); //view the original model

    //Compute the silhouette
    vtkSmartPointer<vtkPolyDataSilhouette> silhouette = vtkSmartPointer<vtkPolyDataSilhouette>::New();
#if VTK_MAJOR_VERSION <= 5
    silhouette->SetInput(polyData);
#else
    silhouette->SetInputData(polyData);
#endif
    silhouette->SetCamera(renderer->GetActiveCamera());
    silhouette->SetEnableFeatureAngle(0);
    silhouette->SetPieceInvariant(0);

    //create mapper and actor for silouette
    vtkSmartPointer<vtkPolyDataMapper> mapper2 =
            vtkSmartPointer<vtkPolyDataMapper>::New();
    mapper2->SetInputConnection(silhouette->GetOutputPort());

    vtkSmartPointer<vtkActor> actor2 = vtkSmartPointer<vtkActor>::New();
    actor2->SetMapper(mapper2);
    actor2->GetProperty()->SetColor(1, 0, 0); // tomato
    actor2->GetProperty()->SetLineWidth(5);
    renderer->AddActor(actor2);
    renderer->SetBackground(.1, .2, .3);
    renderer->ResetCamera();
    // VTK/Qt wedded
    this->ui->qvtkWidgetDelaunay->GetRenderWindow()->AddRenderer(renderer);