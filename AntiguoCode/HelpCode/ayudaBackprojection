MatrixXd dataMallaHomg(4, dMalla.rows());
    MatrixXd vectUnos = MatrixXd::Ones(1,dMalla.rows());
    MatrixXd transp = dMalla.transpose();
    dataMallaHomg << transp, vectUnos;
    int numPuntos = dMalla.rows();
    //calcVectRotGen();
    //calcMatTransformacion();
    //MatrixXd nuevoDataMalla(4,numPuntos);
    //nuevoDataMalla = matProy*dataMallaHomg;
    calcMatProyeccion();
    MatrixXd mallaProy2d(3,numPuntos);

    //la matriz matProy es la unica que se renueva
    matProy.block(0,0,2,2) << matProy.block(0,0,2,2).inverse();
    mallaProy2d = matProy*dataMallaHomg;

    MatrixXd mProy3d;
    mProy3d.resize(4,numPuntos);
    mProy3d.block(0,0,2,numPuntos) << mallaProy2d.block(0,0,2,numPuntos);
    mProy3d.row(2) << DISTFOCAL*vectUnos;
    mProy3d.row(3) << vectUnos;

    MatrixXd reducedMalla(3,numPuntos);
    reducedMalla = mProy3d.block(0,0,3,numPuntos);
    MatrixXd finalMalla(numPuntos,3);
    finalMalla = reducedMalla.transpose();


    MatrixXd res(numPuntos,3);

    VectorXd vnormal(3),centro(3);
    centro << 1, 2, 4;

    for(int i =0; i<numPuntos; i++){
        res.row(i) << finalMalla.row(i) + centro.transpose();
    }

    //usando la formula de backproyeccion

    //1.-calcular factor w
    //-distancia-normal(centroCamara) (ecuacion de plano)
    /*VectorXd vnormal(3),centro(3);
    MatrixXd den(numPuntos,1);
    MatrixXd factsW(numPuntos,1);
    centro << 1, 2, 4;
    vnormal << 1, 3, 5;
    double distancia = 5;

    //2.- vnormal.(ktranspuesta*puntos2D)
    den << finalMalla*vnormal;
    double num = 1/(-distancia - centro.transpose()*vnormal);
    factsW << num*den;
    MatrixXd res(numPuntos,3);
    for(int i =0; i<numPuntos; i++){
        res.row(i) << factsW.row(i)*finalMalla.row(i) + centro.transpose();
    }*/


    //std::cout << "BackProyeccion de Puntos \n" << res << std::endl;

    return res;